{{ imports }}

{{ jsdoc ~}}
export const {{ controllerName }}: {{ controllerInterfaceName }} = async ({ 
  {{#fields}}
    {{~ key ~}},
  {{/fields}}
}) => {

	{{ tryCatchHeader }}

		/*
     * Populate the local 'modelParams' variable
     * with the received inputs.
     */
		const {{ modelPrimaryKeyName }} = new Types.ObjectId();
		const modelParams = {
			{{ modelPrimaryKeyName }},
			{{#fields}}
				{{~ this.key ~}},
			{{/fields}}
		};

		/*
     * Use the populated 'modelParams' variable
     * to create a new instance of '{{ modelName }}'.
     * 'db-{{ serviceName }}'. Then save the created
     * model to the associated store: 'db-{{ serviceName }}',
     */
		const {{ modelInstanceName }} = new {{ modelName }}(modelParams);
		await {{ modelInstanceName }}.save();
	
		/*
     * Use the standard controller response object,
     * 'stat', to return the found model's primary key.
     */ 
		stat.error = false;
		stat.payload = { {{ modelPrimaryKeyName }} };
    
    /*
     * Cast the response object to
     * '{{ controllerInterfaceName }}OutputSuccess',
     * where the casting interface is a component of
     * the binary union type '{{ controllerInterfaceName }}Output'.
     */ 
		return stat as {{ controllerInterfaceName }}OutputSuccess;

	{{ tryCatchFooter }}
}
